name: Build and Release

on:
  push:
    branches:
      - main # Trigger on push to main branch
  workflow_dispatch: # Allow manual triggering

env:
  CARGO_TERM_COLOR: always
  RELEASE_TAG: latest # Always use the same tag

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform_suffix: windows-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            platform_suffix: windows-gnu-x86_64

          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform_suffix: linux-x86_64

          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            platform_suffix: macos-intel-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            platform_suffix: macos-apple-silicon-aarch64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install openssl
          export OPENSSL_ROOT_DIR=$(brew --prefix openssl)
          export OPENSSL_LIB_DIR=$(brew --prefix openssl)/lib
          export OPENSSL_INCLUDE_DIR=$(brew --prefix openssl)/include

      - name: Build both binaries
        run: |
          cargo build --release --target ${{ matrix.target }} --bin minecraft-installer
          cargo build --release --target ${{ matrix.target }} --bin minecraft-updater

      - name: Run tests
        run: cargo test --lib --target ${{ matrix.target }}

      - name: Prepare binaries (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p dist
          cp "target/${{ matrix.target }}/release/minecraft-installer.exe" "dist/minecraft-installer-${{ matrix.platform_suffix }}.exe"
          cp "target/${{ matrix.target }}/release/minecraft-updater.exe" "dist/minecraft-updater-${{ matrix.platform_suffix }}.exe"

      - name: Prepare binaries (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p dist
          cp "target/${{ matrix.target }}/release/minecraft-installer" "dist/minecraft-installer-${{ matrix.platform_suffix }}"
          cp "target/${{ matrix.target }}/release/minecraft-updater" "dist/minecraft-updater-${{ matrix.platform_suffix }}"
          strip "dist/minecraft-installer-${{ matrix.platform_suffix }}"
          strip "dist/minecraft-updater-${{ matrix.platform_suffix }}"
          chmod +x "dist/minecraft-installer-${{ matrix.platform_suffix }}"
          chmod +x "dist/minecraft-updater-${{ matrix.platform_suffix }}"

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: installer-${{ matrix.platform_suffix }}
          path: dist/minecraft-installer-${{ matrix.platform_suffix }}*
          retention-days: 30

      - name: Upload updater artifact
        uses: actions/upload-artifact@v4
        with:
          name: updater-${{ matrix.platform_suffix }}
          path: dist/minecraft-updater-${{ matrix.platform_suffix }}*
          retention-days: 30

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest

    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Delete existing release
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Delete the release if it exists (this will also delete the tag)
          gh release delete ${{ env.RELEASE_TAG }} --yes || true

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${{ env.RELEASE_TAG }}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Organize files and create checksums
        run: |
          mkdir -p upload
          cd artifacts
          
          echo "ðŸ“¦ Organizing binaries..."
          
          # Process installer artifacts
          for dir in installer-*; do
            if [ -d "$dir" ]; then
              for file in "$dir"/*; do
                if [ -f "$file" ]; then
                  filename=$(basename "$file")
                  cp "$file" "../upload/$filename"
                  echo "âœ“ Copied installer: $filename"
                  
                  # Create checksum
                  cd ../upload
                  shasum -a 256 "$filename" > "${filename}.sha256"
                  cd ../artifacts
                fi
              done
            fi
          done
          
          # Process updater artifacts
          for dir in updater-*; do
            if [ -d "$dir" ]; then
              for file in "$dir"/*; do
                if [ -f "$file" ]; then
                  filename=$(basename "$file")
                  cp "$file" "../upload/$filename"
                  echo "âœ“ Copied updater: $filename"
                  
                  # Create checksum
                  cd ../upload
                  shasum -a 256 "$filename" > "${filename}.sha256"
                  cd ../artifacts
                fi
              done
            fi
          done
          
          cd ..
          echo ""
          echo "ðŸ“‹ Files ready for release:"
          ls -lh upload/ | grep -E "(minecraft-installer|minecraft-updater)"

      - name: Generate release notes
        run: |
          node tools/github/releases/generate-release-notes.cjs

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ env.RELEASE_TAG }}
          name: Minecraft Tools - Latest Build
          body_path: RELEASE_NOTES.md
          files: |
            upload/*
          draft: false
          prerelease: false
